require "character.characters"
require "utility.random"
local perlin = require "utility.perlin"

local grass_tile = 5
local dirt_tile = 1
local dark_grass_tile = 3
local beach_tile = 4
local stone_tile = 2
local water_tile = 6
local snow_tile = 7

local background_tiles = { grass_tile, dirt_tile, dark_grass_tile, beach_tile, stone_tile, water_tile }

local tile_size = 32

local base_layer = hash("base")
local fg_layer = hash("fg")


local base_map_path = "#base_map"
local world_map_path = "#world_map"


local function spawn_player(self, pos)
	local ids = collectionfactory.create("#player_spawner", pos)
	self.player = ids[PLAYER_GO]
	print("player_id: " .. self.player)
end

local function spawn_slime(self, pos)
	local ids = collectionfactory.create("#slime_spawner", pos)
	local slime_script_url = msg.url(nil, ids[SLIME_GO], "slime")
	go.set(slime_script_url, "player", self.player)
end

local function spawn_enemies(self)
	for i = 1, 15 do
		local rand_x = math.random(0, 1080)
		local rand_y = math.random(0, 720)
		spawn_slime(self, vmath.vector3(rand_x,  rand_y, 1))
		
	end
end

local function narrow_choices_from(tile, incompatible_table)
	if tile == grass_tile then
		incompatible_table[snow_tile] = true
	elseif tile == dark_grass_tile then
		incompatible_table[beach_tile] = true
	elseif tile == dirt_tile then
		incompatible_table[water_tile] = true
	elseif tile == stone_tile then
		incompatible_table[water_tile] = true
	elseif tile == water_tile then
		incompatible_table[dirt_tile] = true
		incompatible_table[snow_tile] = true
	end
end

local function build_choices(incompatible_table)
	local choices = {}
	for key, value in pairs(background_tiles) do
		if not incompatible_table[value] then
			table.insert(choices, value)
		end
	end
	return choices
end

local function generate_tilemap(start_tile_x, start_tile_y, px_width, px_height)
	for x = 1, math.ceil(px_width / tile_size) + 1 do
		for y = 1, math.ceil(px_height / tile_size) + 1 do
			local tile = dirt_tile
			local incompatible_table = {}
			
			if x == 1 then
				if y == 1 then
					tile = choose_random(background_tiles)
				else
					local south = tilemap.get_tile(base_map_path, base_layer, x, y - 1)
					narrow_choices_from(south, incompatible_table)
					tile = choose_random(build_choices(incompatible_table))
				end
			elseif y == 1 then
				local west = tilemap.get_tile(base_map_path, base_layer, x - 1, y)
				narrow_choices_from(west, incompatible_table)
				tile = choose_random(build_choices(incompatible_table))
			else
				local south = tilemap.get_tile(base_map_path, base_layer, x, y - 1)
				local west = tilemap.get_tile(base_map_path, base_layer, x - 1, y)
				narrow_choices_from(south, incompatible_table)
				narrow_choices_from(west, incompatible_table)
				tile = choose_random(build_choices(incompatible_table))
			end
			
			tilemap.set_tile(base_map_path, base_layer, x, y, tile)
		end	

	end
end


function init(self)
	perlin.init()
	self.auto_tiled_tiles = {}
	generate_tilemap(0, 0, 1100, 590)
	--auto_tile(self)
	if not self.player then
		spawn_player(self, vmath.vector3(600, 400, 1))
	end

	spawn_enemies(self)
	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
