require "character.characters"
require "utility.random"
require "utility.math"

go.property("speed", 95)
go.property("player", hash(""))
go.property("lifetime", SLIME_MAX_LIFETIME)

local state_idle = 1
local state_wander = 2
local state_chase = 3
local state_attack = 4
local state_hit = 5
local state_dead = 6

local animation_idle = 1
local animation_run = 2
local animation_bite = 3
local animation_hit = 4
local animation_die = 5

local detection_area = hash("detection_area")

local attack_delay = 1.7
local iframe_delay = 0.2

local max_health = 30



local animation_ids = { hash("SlimeIdle"), hash("SlimeRun"), hash("SlimeBite"), hash("SlimeHit"), hash("SlimeDie")  }

function init(self)
	self.player_in_range = false
	self.state = state_idle
	self.target_pos = nil
	self.lifetime = math.random(SLIME_MIN_LIFETIME, SLIME_MAX_LIFETIME)
	self.health = max_health
	
	self.timer = self.lifetime
	self.i_timer = 0
	local x_scale = go.get("health_bar#health_fg", "scale.x")
	self.health_px_width = 32 * x_scale
	self.attack_timer = 0
end

local function chase_player(self, dt)
	local pos = go.get_position()
	local player_pos = go.get_position(self.player)

	if vmath.length_sqr(pos - player_pos) < 125 then
		return pos
	end

	local direction = player_pos - pos
	direction.z = 0
	direction = vmath.normalize(direction)

	sprite.set_hflip("#sprite", direction.x > 0)

	pos = pos + direction * self.speed * dt
	return pos
end

local function start_wander(self, dt)
	local pos = go.get_position()
	local target_x = random_donut(15, 180)
	local target_y = random_donut(15, 75)
	self.target_pos = vmath.vector3(target_x, target_y, 0) + pos
	local direction = vmath.normalize(vmath.vector3(target_x, target_y, 0))
	sprite.set_hflip("#sprite", direction.x > 0)
	pos = pos + direction * self.speed * dt
	return pos
end

local function update_wander(self, dt)
	local pos = go.get_position()
	pos = pos + vmath.normalize(self.target_pos - pos) * self.speed * dt
	return pos
end

local function remove_corpse(self, message_id, message, sender)
	go.delete()
end

local function die(self)
	sprite.play_flipbook("#sprite", animation_ids[animation_die], remove_corpse)
end

function update(self, dt)
	if self.state == state_dead then
		return
	end
	
	self.timer = self.timer - dt
	self.attack_timer = self.attack_timer - dt
	if self.i_timer > 0 then
		self.i_timer = self.i_timer - dt
	end
	if self.state == state_attack then
		return
	end
	update_health(self.health_px_width, go.get_position(HEALTH_BAR_GO_PATH), self.timer, self.lifetime)

	local last_state = self.state
	local pos = go.get_position()
	if self.timer <= 0 then
		self.state = state_dead
		die(self)
	elseif self.player and self.player_in_range then
		go.set_position(chase_player(self, dt))
		
		self.state = state_chase
	elseif self.state == state_chase then

		self.state = state_wander
		
		go.set_position(start_wander(self, dt))
	elseif self.state == state_wander then
		if vmath.length_sqr(pos - self.target_pos) < 1 then
			
			self.state = state_idle
		else
			go.set_position(update_wander(self, dt))
		end
	end

	if self.state ~= last_state then
		if self.state == state_chase then
			sprite.play_flipbook("#sprite", animation_ids[animation_run])
		elseif self.state == state_idle then
			sprite.play_flipbook("#sprite", animation_ids[animation_idle])
		end
	end

	
end

local function calculate_damage(self)
	return 5
end

local function finish_attack(self, message_id, message, sender)
	self.state = state_wander
end

local function attack(self, receiver_id)
	if self.state == state_attack or self.attack_timer > 0 then
		print("already attacked in attack state")
		return
	end

	self.attack_timer = attack_delay
	msg.post(receiver_id, HURT, { damage = calculate_damage(self)})
	self.state = state_attack
	print("attack state activated")
	sprite.play_flipbook("#sprite", animation_ids[animation_bite], finish_attack)
end

function on_message(self, message_id, message, sender)
	if message_id == TRIGGER_MESSAGE then
		self.player_in_range = message.enter
	elseif message_id == COLLISION_MESSAGE then
		if message.other_group == GROUP_PLAYER and message.own_group == GROUP_ENEMIES then
			attack(self, message.other_id)
		end

	elseif message_id == HURT then
		
		if self.i_timer > 0 then
				return
		end
		self.health = self.health - message.damage
		if self.health < 0 then
				self.health = 0
		end
		self.i_timer = iframe_delay
		update_health(self.health_px_width, go.get_position(HEALTH_BAR_GO_PATH), self.health, max_health)
		
	end
end
