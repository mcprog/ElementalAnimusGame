require "character.characters"

local action_up = hash("up")
local action_left = hash("left")
local action_down = hash("down")
local action_right = hash("right")
local action_shoot = hash("space")

local half_root_2 = math.sqrt(2) / 2.0


local animation_idle = 1
local animation_right = 2
local animation_down = 3
local animmation_up = 4

local animation_ids = { hash("SnakeIdle"), hash("SnakeRight"), hash("SnakeDown"), hash("SnakeUp")  }

go.property("speed", 215)
local max_health = 100
local iframe_delay = 0.2

local projectile_offset = 15
local shoot_delay = 0.65

function init(self)
	msg.post(".", "acquire_input_focus")

	self.x_dir = 0
	self.y_dir = 0
	self.velocity = vmath.vector3()
	self.animation_state = animation_idle
	self.health = max_health
	self.i_timer = 0
	self.facing = 1
	self.shoot_timer = 0

	local x_scale = go.get("health_bar#health_fg", "scale.x")
	self.health_px_width = 32 * x_scale
end

function final(self)
	msg.post(".", "release_input_focus")
end

local function update_player_position(self, dt)
	self.velocity.x = self.x_dir
	self.velocity.y = self.y_dir
	if self.velocity.x ~= 0 and self.velocity.y ~= 0 then
		self.velocity = self.velocity * half_root_2
	end
	self.velocity = self.velocity * self.speed

	local pos = go.get_position()
	pos.x = pos.x + self.velocity.x * dt
	pos.y = pos.y + self.velocity.y * dt
	go.set_position(pos)
end



function update(self, dt)
	if self.i_timer > 0 then
		self.i_timer = self.i_timer - dt
	end
	if self.shoot_timer > 0 then
		self.shoot_timer = self.shoot_timer - dt
	end
	update_player_position(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == HURT then
		if self.i_timer > 0 then
			return
		end
		self.health = self.health - message.damage
		if self.health < 0 then
			self.health = 0
		end
		self.i_timer = iframe_delay
		update_health(self.health_px_width, go.get_position(HEALTH_BAR_GO_PATH), self.health, max_health)
		sound.play("#sound_hurt")
	end
end

local function handle_animations(self)
	if self.x_dir ~= 0 then
		self.facing = self.x_dir
		sprite.set_hflip("#sprite", self.x_dir < 0)
	end

	local new_animation_state
	if self.x_dir == 0 then
		if self.y_dir == 0 then
			new_animation_state = animation_idle
		elseif self.y_dir > 0 then
			new_animation_state = animmation_up
		else
			new_animation_state = animation_down
		end
	else
		new_animation_state = animation_right
	end

	if new_animation_state ~= self.animation_state then
		self.animation_state = new_animation_state
		sprite.play_flipbook("#sprite", animation_ids[self.animation_state])
	end
end

function on_input(self, action_id, action)
	if action_id == action_up then
		if action.pressed then
			self.y_dir = self.y_dir + 1
		elseif action.released then
			self.y_dir = self.y_dir - 1
		end
	elseif action_id == action_down then
		if action.pressed then
			self.y_dir = self.y_dir - 1
		elseif action.released then
			self.y_dir = self.y_dir + 1
		end
	elseif action_id == action_left then
		if action.pressed then
			self.x_dir = self.x_dir - 1
		elseif action.released then
			self.x_dir = self.x_dir + 1
		end
	elseif action_id == action_right then
		if action.pressed then
			self.x_dir = self.x_dir + 1
		elseif action.released then
			self.x_dir = self.x_dir - 1
		end
	elseif action_id == action_shoot and action.pressed then
		if self.shoot_timer > 0 then
			return
		end
		local spawn_pos = go.get_position()
		spawn_pos.x = spawn_pos.x + self.x_dir * projectile_offset
		spawn_pos.y = spawn_pos.y + self.y_dir * projectile_offset
		local direction = vmath.vector3(self.x_dir, self.y_dir, 0)
		if self.x_dir == 0 and self.y_dir == 0 then
			direction.x = self.facing
		end

		self.shoot_timer = shoot_delay
		local id = factory.create("#poison_spawner", spawn_pos, nil, { direction = direction })
	end

	handle_animations(self)
	
end